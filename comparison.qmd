---
title: "Comparison of high-dimensional Methods"
author: "Giulio Benedetti"
editor: visual
---

```{r}
#| label: setup
#| include: FALSE

# Import utilities
source("funs.R")
library(ggplot2)
library(ggrepel)
library(patchwork)
library(ggVennDiagram)

# Set chunks options
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

```{r}
#| label: import-data
tse <- OKeefeDSData()
```

```{r}
#| label: prepare-data1
tse <- transformAssay(tse,
                      method = "relabundance")

tse <- estimateDiversity(tse,
                         index = "shannon",
                         assay.type = "relabundance")
```

```{r}
#| label: prepare-data2
tse <- tse[ , !is.na(tse$bmi_group)]
tse <- tse[ , !is.na(tse$nationality)]

colData(tse)$bmi_group <- as.numeric(tse$bmi_group)
colData(tse)$nationality <- as.numeric(factor(tse$nationality)) - 1

tse <- transformAssay(tse,
                      method = "clr",
                      pseudocount = 1)

tse <- tse[ , tse$timepoint.within.group == 2]
```

```{r}
#| label: run-mediate
med_res <- mediateAssay(tse,
                        outcome = "bmi_group",
                        treatment = "nationality",
                        assay.type = "clr",
                        boot = TRUE, sims = 100)

hima_res <- mediate_hima(A = tse$nationality,
                         M = t(assay(tse, "clr")),
                         Y = tse$bmi_group)

hdma_res <- mediate_hdma(A = tse$nationality,
                         M = t(assay(tse, "clr")),
                         Y = tse$bmi_group)

bslmm_res <- mediate_bslmm(A = tse$nationality,
                           M = t(assay(tse, "clr")),
                           Y = tse$bmi_group)
```

```{r}
#| label: combine-results
med_df <- med_res %>%
  rename(mediator = Mediator) %>%
  full_join(bslmm_res$contributions, by = "mediator") %>%
  full_join(hima_res$contributions, by = "mediator",
            suffix = c("_bslmm", "")) %>%
  full_join(hdma_res$contributions, by = "mediator",
            suffix = c("_hima", "_hdma"))
```

```{r}
#| label: fun-venn
plot.venn <- function(med_df, cutoff,
                      pval_cols = c("ab_pv_hima",
                                    "ab_pv_hdma",
                                    "ACME_adjpval")) {
  
  lis <- lapply(med_df[ , pval_cols],
                function(col) which(col < cutoff))
  
  names(lis) <- c("hima", "hdma", "mediate")

  p <- ggVennDiagram(lis,
                     label_geom = "text",
                     label_alpha = 1) +
    scale_fill_gradient(low = "white", high = "red") +
    labs(title = paste("Alpha:", cutoff))
  
  return(p)
}
```

```{r}
#| label: plt-venn
#| fig-height: 7
#| fig-width: 7
(plot.venn(med_df, 0.001) | plot.venn(med_df, 0.01)) /
  (plot.venn(med_df, 0.05) | plot.venn(med_df, 0.25)) +
  plot_layout(guides = "collect")
```

```{r}
#| label: fun-combos
get.combos <- function(x) {
  
  pval_combos <- t(combn(m = 2, x[c("mediate", "hima", "hdma")]))
  method_combos <- t(combn(m = 2, c("mediate", "hima", "hdma")))
  
  mat <- cbind(x[["mediator"]], pval_combos, method_combos)
  
  return(mat)
}
```

```{r}
#| label: find-combos
comb_df <- med_df %>%
  transmute(mediator,
            mediate = ACME_adjpval,
            hima = ab_pv_hima,
            hdma = ab_pv_hdma) %>%
  apply(1, get.combos, simplify = FALSE) %>%
  do.call(rbind, .) %>%
  as.data.frame() %>%
  drop_na() %>%
  mutate(V2 = as.numeric(V2),
         V3 = as.numeric(V3))

colnames(comb_df) <- c("mediator", "xval", "yval", "xname", "yname")
```

```{r}
#| label: plt-combos
#| fig-height: 7
#| fig-width: 7
ggplot(comb_df, aes(x = xval, y = yval)) +
  geom_hline(yintercept = 0.05,
             linetype = "dashed", colour = "red") +
  geom_vline(xintercept = 0.05,
             linetype = "dashed", colour = "red") +
  geom_point() +
  scale_x_continuous(limits = c(0, 1)) +
  scale_y_continuous(limits = c(0, 1)) +
  geom_text_repel(aes(label = mediator), size = 2.5) +
  facet_grid(xname ~ yname) +
  labs(x = "pval", y = "pval") +
  theme_bw()
```
